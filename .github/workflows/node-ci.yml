name: Node.js CI + Optional CD for CalendarMeet

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Cache npm dependencies
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run tests (CI)
      - name: Run tests
        run: npm test

      # Build React frontend
      - name: Build React frontend
        run: |
          if [ -d "calendarmeet-app" ]; then
            cd calendarmeet-app
            npm ci
            npm run build
          fi

deploy-to-ec2:
  runs-on: ubuntu-latest
  needs: build-and-test
  if: github.ref == 'refs/heads/main' 
  steps:
    # Checkout code again
    - name: Checkout repository
      uses: actions/checkout@v4

    # Upload only the necessary files to EC2
    - name: Copy project files to EC2
      uses: appleboy/scp-action@master
      with:
        host: ec2-3-133-115-8.us-east-2.compute.amazonaws.com
        username: ec2-user
        key: ${{ secrets.EC2_KEY }}
        port: 22
        source: |
          package.json
          package-lock.json
          server.js
          calendarmeet-app/dist
        target: /home/ec2-user/calendarmeet

    # SSH into EC2 to install dependencies and restart Node server
    - name: SSH and restart Node server
      uses: appleboy/ssh-action@v0.1.9
      with:
        host: ec2-3-133-115-8.us-east-2.compute.amazonaws.com
        username: ec2-user
        key: ${{ secrets.EC2_KEY }}
        port: 22
        script: |
          cd /home/ec2-user/calendarmeet
          # Install/update Node dependencies
          npm ci
          # Stop any existing server (safe way)
          pkill -f "node server.js" || true
          # Start the server in the background
          nohup node server.js > log.txt 2>&1 &
          echo "Deployment complete"


